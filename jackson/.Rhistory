df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
#df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf[1],isin = "upper_bound")
#df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf[1], isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1 , isin = "actual")
df = rbind(df1, df2, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") #+ geom_smooth(aes(x=time, y=M, ymax=upperConf[1], ymin=lowerConf[1]), colour="red", data=df2, stat='identity')
currData = ts
currPred1 = vector("numeric", testLength)
currPred2 = vector("numeric", testLength)
upperConf1 = vector("numeric", testLength)
upperConf2 = vector("numeric", testLength)
lowerConf1 = vector("numeric", testLength)
lowerConf2 = vector("numeric", testLength)
for (h in (length + 1):(length+testLength)) {
i = h - length
# predicts
currPred = VARpred(m2, output = F)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
upperConf1[i] = currPred1[i] + 1.96*currPred$se.err[1]
upperConf2[i] = currPred2[i] + 1.96*currPred$se.err[2]
lowerConf1[i] = currPred1[i] - 1.96*currPred$se.err[1]
lowerConf2[i] = currPred2[i] - 1.96*currPred$se.err[2]
oldData = as_tibble(currData)
currData = as_tibble(currData$ts1)
currData[h,1] = test1[i]
oldData = oldData[,-1]
oldData[h, 1] = test2[i]
currData[,2] = oldData$ts2
currData[,3] = 1:h
currData = rename(currData, "ts1" = "value")
currData = rename(currData, "ts2" = "...2")
currData = rename(currData, "index" = "...3")
currData = currData %>% as_tsibble(index = "index")
# build the model
m2 = VAR(currData, 1, output = F)
}
currData = ts
currPred1 = vector("numeric", testLength)
currPred2 = vector("numeric", testLength)
upperConf1 = vector("numeric", testLength)
upperConf2 = vector("numeric", testLength)
lowerConf1 = vector("numeric", testLength)
lowerConf2 = vector("numeric", testLength)
for (h in (length + 1):(length+testLength)) {
# build the model
m2 = VAR(currData, 1, output = F)
i = h - length
# predicts
currPred = VARpred(m2, output = F)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
upperConf1[i] = currPred1[i] + 1.96*currPred$se.err[1]
upperConf2[i] = currPred2[i] + 1.96*currPred$se.err[2]
lowerConf1[i] = currPred1[i] - 1.96*currPred$se.err[1]
lowerConf2[i] = currPred2[i] - 1.96*currPred$se.err[2]
oldData = as_tibble(currData)
currData = as_tibble(currData$ts1)
currData[h,1] = test1[i]
oldData = oldData[,-1]
oldData[h, 1] = test2[i]
currData[,2] = oldData$ts2
currData[,3] = 1:h
currData = rename(currData, "ts1" = "value")
currData = rename(currData, "ts2" = "...2")
currData = rename(currData, "index" = "...3")
currData = currData %>% as_tsibble(index = "index")
}
currData = ts
currPred1 = vector("numeric", testLength)
currPred2 = vector("numeric", testLength)
upperConf1 = vector("numeric", testLength)
upperConf2 = vector("numeric", testLength)
lowerConf1 = vector("numeric", testLength)
lowerConf2 = vector("numeric", testLength)
for (h in (length + 1):(length+testLength)) {
# build the model
m2 = VAR(currData, 1, output = T)
i = h - length
# predicts
currPred = VARpred(m2, output = F)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
upperConf1[i] = currPred1[i] + 1.96*currPred$se.err[1]
upperConf2[i] = currPred2[i] + 1.96*currPred$se.err[2]
lowerConf1[i] = currPred1[i] - 1.96*currPred$se.err[1]
lowerConf2[i] = currPred2[i] - 1.96*currPred$se.err[2]
oldData = as_tibble(currData)
currData = as_tibble(currData$ts1)
currData[h,1] = test1[i]
oldData = oldData[,-1]
oldData[h, 1] = test2[i]
currData[,2] = oldData$ts2
currData[,3] = 1:h
currData = rename(currData, "ts1" = "value")
currData = rename(currData, "ts2" = "...2")
currData = rename(currData, "index" = "...3")
currData = currData %>% as_tsibble(index = "index")
}
# predicts
currPred = VARpred(m2, output = T)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
currData = ts
currPred1 = vector("numeric", testLength)
currPred2 = vector("numeric", testLength)
upperConf1 = vector("numeric", testLength)
upperConf2 = vector("numeric", testLength)
lowerConf1 = vector("numeric", testLength)
lowerConf2 = vector("numeric", testLength)
for (h in (length + 1):(length+testLength)) {
# build the model
m2 = VAR(currData, 1, output = F)
i = h - length
# predicts
currPred = VARpred(m2, output = T)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
upperConf1[i] = currPred1[i] + 1.96*currPred$se.err[1]
upperConf2[i] = currPred2[i] + 1.96*currPred$se.err[2]
lowerConf1[i] = currPred1[i] - 1.96*currPred$se.err[1]
lowerConf2[i] = currPred2[i] - 1.96*currPred$se.err[2]
oldData = as_tibble(currData)
currData = as_tibble(currData$ts1)
currData[h,1] = test1[i]
oldData = oldData[,-1]
oldData[h, 1] = test2[i]
currData[,2] = oldData$ts2
currData[,3] = 1:h
currData = rename(currData, "ts1" = "value")
currData = rename(currData, "ts2" = "...2")
currData = rename(currData, "index" = "...3")
currData = currData %>% as_tsibble(index = "index")
}
currData = ts
currPred1 = vector("numeric", testLength)
currPred2 = vector("numeric", testLength)
upperConf1 = vector("numeric", testLength)
upperConf2 = vector("numeric", testLength)
lowerConf1 = vector("numeric", testLength)
lowerConf2 = vector("numeric", testLength)
for (h in (length + 1):(length+testLength)) {
# build the model
m2 = VAR(currData, 1, output = F)
i = h - length
# predicts
currPred = VARpred(m2, output = F)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
upperConf1[i] = currPred1[i] + 1.96*currPred$se.err[1]
upperConf2[i] = currPred2[i] + 1.96*currPred$se.err[2]
lowerConf1[i] = currPred1[i] - 1.96*currPred$se.err[1]
lowerConf2[i] = currPred2[i] - 1.96*currPred$se.err[2]
oldData = as_tibble(currData)
currData = as_tibble(currData$ts1)
currData[h,1] = test1[i]
oldData = oldData[,-1]
oldData[h, 1] = test2[i]
currData[,2] = oldData$ts2
currData[,3] = 1:h
currData = rename(currData, "ts1" = "value")
currData = rename(currData, "ts2" = "...2")
currData = rename(currData, "index" = "...3")
currData = currData %>% as_tsibble(index = "index")
}
currData = ts
currPred1 = vector("numeric", testLength)
currPred2 = vector("numeric", testLength)
upperConf1 = vector("numeric", testLength)
upperConf2 = vector("numeric", testLength)
lowerConf1 = vector("numeric", testLength)
lowerConf2 = vector("numeric", testLength)
for (h in (length + 1):(length+testLength)) {
# build the model
m2 = VAR(currData, 1, output = F)
i = h - length
# predicts
currPred = VARpred(m2, output = T)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
upperConf1[i] = currPred1[i] + 1.96*currPred$se.err[1]
upperConf2[i] = currPred2[i] + 1.96*currPred$se.err[2]
lowerConf1[i] = currPred1[i] - 1.96*currPred$se.err[1]
lowerConf2[i] = currPred2[i] - 1.96*currPred$se.err[2]
oldData = as_tibble(currData)
currData = as_tibble(currData$ts1)
currData[h,1] = test1[i]
oldData = oldData[,-1]
oldData[h, 1] = test2[i]
currData[,2] = oldData$ts2
currData[,3] = 1:h
currData = rename(currData, "ts1" = "value")
currData = rename(currData, "ts2" = "...2")
currData = rename(currData, "index" = "...3")
currData = currData %>% as_tsibble(index = "index")
}
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
#df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf[1],isin = "upper_bound")
#df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf[1], isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1 , isin = "actual")
df = rbind(df1, df2, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") #+ geom_smooth(aes(x=time, y=M, ymax=upperConf[1], ymin=lowerConf[1]), colour="red", data=df2, stat='identity')
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1 , isin = "actual")
df = rbind(df1, df2, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="red", data=df2, stat='identity')
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="none", data=df2, stat='identity')
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="red", data=df2, stat='identity')
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="green", data=df2, stat='identity')
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="dark green", data=df2, stat='identity')
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = pred$pred[1] , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf[1],isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf[1], isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1 , isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf[1], ymin=lowerConf[1]), colour="red", data=df2, stat='identity')
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts2[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = pred$pred[2] , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf[2],isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf[2], isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test2, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts2") + geom_smooth(aes(x=time, y=M, ymax=upperConf[2], ymin=lowerConf[2]), colour="yellow", data=df2, stat='identity')
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="dark green", data=df2, stat='identity')
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="yellow", data=df2, stat='identity')
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="yellow", data=df2, stat='identity')
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred2, isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf2,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf2, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test2, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf2, ymin=lowerConf2), colour="yellow", data=df2, stat='identity')
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="yellow", data=df2, stat='identity')
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred2, isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf2,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf2, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test2, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts2") + geom_smooth(aes(x=time, y=M, ymax=upperConf2, ymin=lowerConf2), colour="yellow", data=df2, stat='identity')
currPred1 = currPred1[-1]
currPred2 = currPred2[-1]
upperConf1 = upperConf1[-1]
lowerConf1 = lowerConf1[-1]
upperConf2 = upperConf2[-1]
lowerConf2 = lowerConf2[-1]
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tsibble)
library(ggplot2)
library(feasts)
library(gridExtra)
library(MTS)
library(dse)
# Generates the two vectors
set.seed(14)
length = 320
testLength = 20
ts1 = vector("numeric", length)
noise = makeTSnoise(length, 1, 0)$w
# Simluates the model
ts1[1] = noise[1]
for(t in 2:length) {
ts1[t] = 0.3*ts1[t - 1] + noise[t]
}
ts2 = vector("numeric", length)
noise = makeTSnoise(length, 1, 0)$w
ts2[1] = noise[1]
for(t in 2:length) {
ts2[t] = 0.4*ts2[t - 1] + ts1[t - 1] + noise[t]
}
# Takes out the testing data
test1 = ts1[(length-testLength):(length-1)]
ts1 = ts1[1:(length-testLength)]
test2 = ts2[(length-testLength):(length-1)]
ts2 = ts2[1:(length-testLength)]
length = length - testLength
# Turns them into a time series object
ts = as_tibble(ts1)
ts = rename(ts, "ts1" = "value")
ts[,2] = ts2
ts = rename(ts, "ts2" = "...2")
ts[,3] = 1:length
ts = rename(ts, "index" = "...3")
ts = ts %>% as_tsibble(index = "index")
plot1 = ts %>% autoplot(ts1) + xlab("ts1")
plot2 = ts %>% autoplot(ts2) + xlab("ts2")
grid.arrange(plot1, plot2, nrow=2)
# Does the order test
VARorder(ts[,-3])
# Does LS estimation of the model
m1 = VAR(ts[,-3], 1)
eigen(m1$Phi)[1]
mq(m1$residuals)
pred = VARpred(m1, h = testLength)
# Calculates the confidence interval
upperConf = pred$pred + 1.96 * pred$se.err
lowerConf = pred$pred - 1.96 * pred$se.err
drawLength = 50
drawStart = length - drawLength
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = pred$pred[1] , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf[1],isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf[1], isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1 , isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf[1], ymin=lowerConf[1]), colour="red", data=df2, stat='identity')
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts2[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = pred$pred[2] , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf[2],isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf[2], isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test2, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts2") + geom_smooth(aes(x=time, y=M, ymax=upperConf[2], ymin=lowerConf[2]), colour="yellow", data=df2, stat='identity')
currData = ts
currPred1 = vector("numeric", testLength)
currPred2 = vector("numeric", testLength)
upperConf1 = vector("numeric", testLength)
upperConf2 = vector("numeric", testLength)
lowerConf1 = vector("numeric", testLength)
lowerConf2 = vector("numeric", testLength)
for (h in (length + 1):(length+testLength)) {
# build the model
m2 = VAR(currData, 1, output = F)
i = h - length
# predicts
currPred = VARpred(m2, output = T)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
upperConf1[i] = currPred1[i] + 1.96*currPred$se.err[1]
upperConf2[i] = currPred2[i] + 1.96*currPred$se.err[2]
lowerConf1[i] = currPred1[i] - 1.96*currPred$se.err[1]
lowerConf2[i] = currPred2[i] - 1.96*currPred$se.err[2]
oldData = as_tibble(currData)
currData = as_tibble(currData$ts1)
currData[h,1] = test1[i]
oldData = oldData[,-1]
oldData[h, 1] = test2[i]
currData[,2] = oldData$ts2
currData[,3] = 1:h
currData = rename(currData, "ts1" = "value")
currData = rename(currData, "ts2" = "...2")
currData = rename(currData, "index" = "...3")
currData = currData %>% as_tsibble(index = "index")
}
currPred1 = currPred1[-1]
currPred2 = currPred2[-1]
upperConf1 = upperConf1[-1]
lowerConf1 = lowerConf1[-1]
upperConf2 = upperConf2[-1]
lowerConf2 = lowerConf2[-1]
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
currData = ts
currPred1 = vector("numeric", testLength)
currPred2 = vector("numeric", testLength)
upperConf1 = vector("numeric", testLength)
upperConf2 = vector("numeric", testLength)
lowerConf1 = vector("numeric", testLength)
lowerConf2 = vector("numeric", testLength)
for (h in (length + 1):(length+testLength)) {
# build the model
m2 = VAR(currData, 1, output = F)
i = h - length
# predicts
currPred = VARpred(m2, output = T)
currPred1[i] = currPred$pred[1]
currPred2[i] = currPred$pred[2]
upperConf1[i] = currPred1[i] + 1.96*currPred$se.err[1]
upperConf2[i] = currPred2[i] + 1.96*currPred$se.err[2]
lowerConf1[i] = currPred1[i] - 1.96*currPred$se.err[1]
lowerConf2[i] = currPred2[i] - 1.96*currPred$se.err[2]
oldData = as_tibble(currData)
currData = as_tibble(currData$ts1)
currData[h,1] = test1[i]
oldData = oldData[,-1]
oldData[h, 1] = test2[i]
currData[,2] = oldData$ts2
currData[,3] = 1:h
currData = rename(currData, "ts1" = "value")
currData = rename(currData, "ts2" = "...2")
currData = rename(currData, "index" = "...3")
currData = currData %>% as_tsibble(index = "index")
}
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred1 , isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf1,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf1, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test1, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts1") + geom_smooth(aes(x=time, y=M, ymax=upperConf1, ymin=lowerConf1), colour="yellow", data=df2, stat='identity')
## wrap data into a data.frame
df1 = data.frame(time = seq(drawStart,length,length=drawLength), M = ts$ts1[(drawStart+1):length], isin = "observations")
df2 = data.frame(time = seq(length,length+testLength,length=testLength), M = currPred2, isin = "forecast")
df3 = data.frame(time = seq(length,length+testLength,length=testLength), M = upperConf2,isin = "upper_bound")
df4 = data.frame(time = seq(length,length+testLength,length=testLength), M = lowerConf2, isin = "lower_bound")
df5 = data.frame(time = seq(length,length+testLength,length=testLength), M = test2, isin = "actual")
df = rbind(df1, df2, df3, df4, df5)
## ggplot object
ggplot(df, aes(x = time, y = M, color = isin)) + geom_line() + ggtitle("Predictions for ts2") + geom_smooth(aes(x=time, y=M, ymax=upperConf2, ymin=lowerConf2), colour="yellow", data=df2, stat='identity')
